generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?

  @@map(name: "users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  firstName   String
  lastName    String
  houseNumber String?
  streetName  String?
  town        String?
  postCode    String?
  phone       String?
  profileId   Int       @unique
  orders      Order?
  Wishlist    Wishlist?
  cart        Cart?     @relation(fields: [cartId], references: [id])
  cartId      Int?      @unique

  @@map(name: "profiles")
}

model Wishlist {
  id            Int             @id @default(autoincrement())
  profileId     Int             @unique
  profile       Profile         @relation(fields: [profileId], references: [id])
  wishlistItems WishlistItems[]

  @@map(name: "wishlists")
}

model WishlistItems {
  id         Int      @id @default(autoincrement())
  wishlistId Int      @unique
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  Int
  quantity   Int

  @@map(name: "wishlist_items")
}

model Order {
  id         Int         @id @default(autoincrement())
  orderItems OrderItem[]
  profileId  Int         @unique
  profile    Profile     @relation(fields: [profileId], references: [id])
  createdAt  DateTime    @default(now()) @map(name: "created_at")

  @@map(name: "orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order @relation(fields: [orderId], references: [id])

  @@map(name: "order_items")
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    String
  cartItems CartItems[]
  Profile   Profile?

  @@map(name: "carts")
}

model CartItems {
  id        Int    @id @default(autoincrement())
  cartId    Int    @unique
  cart      Cart   @relation(fields: [cartId], references: [id])
  productId Int
  size      String

  @@map(name: "cart_items")
}

model Product {
  id                Int     @id @default(autoincrement())
  productName       String
  price             Int
  colour            String
  category          String
  subCategory       String
  // images         ProductImages?
  productImageOne   String
  productImageTwo   String
  productImageThree String?
  description       String
  material          String
  materialSource    String
  madeIn            String
  wishlistId        Int?
  cartId            Int?    @unique

  @@map(name: "products")
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  content2  String?
  imageUrl  String
  imageUrl2 String?
  imageUrl3 String?
  imageUrl4 String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "blogs")
}

// model ProductImages {
//   id        Int                @id @default(autoincrement())
//   product   Product            @relation(fields: [productId], references: [id])
//   productId Int                @unique
//   imageUrl  ProductImageLink[]

//   @@map(name: "product_images")
// }

// model ProductImageLink {
//   id              Int           @id @default(autoincrement())
//   productImages   ProductImages @relation(fields: [productImagesId], references: [id])
//   productImagesId Int
//   imageUrl        String

//   @@map(name: "product_image_links")
// }
