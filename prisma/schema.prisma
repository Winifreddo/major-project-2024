// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  marketingEmails Boolean  @default(false)
  createdAt       DateTime @default(now()) @map(name: "created_at")
  profile         Profile?

  @@map(name: "users")
}

model Profile {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  firstName String
  lastName  String
  address   Address?
  phone     String?
  profileId Int       @unique
  orders    Order?
  Wishlist  Wishlist?
  cart      Cart?     @relation(fields: [cartId], references: [id])
  cartId    Int?      @unique

  @@map(name: "profiles")
}

model Wishlist {
  id            Int             @id @default(autoincrement())
  profileId     Int             @unique
  profile       Profile         @relation(fields: [profileId], references: [id])
  wishlistItems WishlistItems[]

  @@map(name: "wishlists")
}

model WishlistItems {
  id         Int      @id @default(autoincrement())
  wishlistId Int      @unique
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  Int
  quantity   Int

  @@map(name: "wishlist_items")
}

model Order {
  id         Int         @id @default(autoincrement())
  orderItems OrderItem[]
  profileId  Int         @unique
  profile    Profile     @relation(fields: [profileId], references: [id])
  createdAt  DateTime    @default(now()) @map(name: "created_at")

  @@map(name: "orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order @relation(fields: [orderId], references: [id])

  @@map(name: "order_items")
}

model Address {
  id          Int     @id @default(autoincrement())
  profileId   Int     @unique
  profile     Profile @relation(fields: [profileId], references: [id])
  houseNumber String
  streetName  String
  postCode    String

  @@map(name: "addresses")
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    String
  cartItems CartItems[]
  Profile   Profile?

  @@map(name: "carts")
}

model CartItems {
  id        Int  @id @default(autoincrement())
  cartId    Int  @unique
  cart      Cart @relation(fields: [cartId], references: [id])
  productId Int
  quantity  Int

  @@map(name: "cart_items")
}

model Product {
  id             Int            @id @default(autoincrement())
  productName    String
  price          Int
  colour         String
  category       String
  subCategory    String
  images         ProductImages?
  description    String
  material       String
  materialSource String
  madeIn         String
  wishlistId     Int?
  cartId         Int?           @unique

  @@map(name: "products")
}

model ProductImages {
  id        Int                @id @default(autoincrement())
  product   Product            @relation(fields: [productId], references: [id])
  productId Int                @unique
  imageUrl  ProductImageLink[]

  @@map(name: "product_images")
}

model ProductImageLink {
  id              Int           @id @default(autoincrement())
  productImages   ProductImages @relation(fields: [productImagesId], references: [id])
  productImagesId Int
  imageUrl        String

  @@map(name: "product_image_links")
}
